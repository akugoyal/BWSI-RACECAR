"""
MIT BWSI Autonomous RACECAR
MIT License
racecar-neo-prereq-labs

File Name: lab4.py

Title: Lab 4 - Line Follower

Author: Akul Goyal

Purpose: Write a script to enable fully autonomous behavior from the RACECAR. The
RACECAR should automatically identify the color of a line it sees, then drive on the
center of the line throughout the obstacle course. The RACECAR should also identify
color changes, following colors with higher priority than others. Complete the lines 
of code under the #TODO indicators to complete the lab.

Expected Outcome: When the user runs the script, the RACECAR should be fully autonomous
and drive without the assistance of the user. The RACECAR drives according to the following
rules:
- The RACECAR maintains a following behavior by keeping the line in the center of the screen
- The RACECAR's color priority is RED > GREEN > BLUE.
- The angle of the RACECAR is variable, and is calculated after every frame
- The speed of the RACECAR may be static or variable, depending on the programmer's intents
- The RACECAR must adjust to challenges such as ramps, sharp turns, and dead ends

Environment: Test your code using the level "Neo Labs > Lab 4: Line Follower".
Use the "TAB" key to advance from checkpoint to checkpoint to practice each section before
running through the race in "race mode" to do the full course. Lowest time wins!
"""

########################################################################################
# Imports
########################################################################################

import sys
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import warnings
import copy
from numpy import Inf
import math

# If this file is nested inside a folder in the labs folder, the relative path should
# be [1, ../../library] instead.
sys.path.insert(1, "../../library")
import racecar_core
import racecar_utils as rc_utils

########################################################################################
# Global variables
########################################################################################
rc = racecar_core.create_racecar(True)

# >> Variables
camera_frames = []
CAMERA_FRAMES_LAG = 5

# Used for the controller
integral = 0
last_error = []
times = []
# ilc_data = [(73.0, 81.0, -0.039733734130859344), (76.0, 81.0, -0.029215927124023433), (77.0, 86.0, -0.04786529541015627), (77.0, 84.0, -0.03773689270019531), (78.0, 83.0, -0.023758773803710942), (80.0, 81.0, -0.005405654907226554), (82.0, 82.0, 0.00015838623046882105), (82.0, 81.0, 0.0009854888916016602), (0, 60.0, 0.09600715637207036), (0, 108.0, -0.3786212158203125), (115.0, 78.0, 0.18550811767578135), (115.0, 83.0, 0.16023132324218747), (100.0, 83.0, 0.08266510009765615), (100.0, 105.0, -0.023979263305664023), (90.0, 105.0, -0.07439216613769528), (90.0, 119.0, -0.1445351409912109), (78.0, 119.0, -0.20390701293945312), (68.0, 0, -0.020323486328124973), (34.0, 0, -0.3558037948608398), (58.0, 116.0, -0.28885028839111326), (76.0, 106.0, -0.1508389282226562), (76.0, 94.0, -0.09044006347656253), (84.0, 94.0, -0.052180175781250004), (84.0, 83.0, 0.0037980651855469283), (97.0, 72.0, 0.12126289367675791), (99.0, 72.0, 0.13388633728027344), (99.0, 61.0, 0.19023704528808594), (102.0, 61.0, 0.2053791046142579), (102.0, 53.0, 0.2472193145751953), (99.0, 53.0, 0.23234382629394523), (99.0, 49.0, 0.24924736022949223), (96.0, 49.0, 0.23549942016601566), (90.0, 50.0, 0.2019546508789063), (82.0, 50.0, 0.1617909240722657), (82.0, 54.0, 0.14005180358886715), (81.0, 54.0, 0.1324693298339843), (81.0, 56.0, 0.12113258361816404), (78.0, 56.0, 0.10811439514160148), (78.0, 61.0, 0.08604309082031247), (75.0, 65.0, 0.05017295837402336), (68.0, 72.0, -0.020985641479492223), (65.0, 72.0, -0.032285614013671915), (64.0, 76.0, -0.05730224609375001), (61.0, 76.0, -0.07115245819091798), (62.0, 75.0, -0.06468456268310552), (66.0, 71.0, -0.026693496704101594), (66.0, 69.0, -0.014761123657226594), (57.0, 69.0, -0.06121200561523432), (55.0, 69.0, -0.07170032501220702), (55.0, 97.0, -0.21018959045410157), (43.0, 97.0, -0.2685235977172852), (43.0, 82.0, -0.19290058135986332), (34.0, 70.0, -0.17687358856201174), (25.0, 70.0, -0.22487564086914058), (25.0, 59.0, -0.17378704071044926), (74.0, 86.0, -0.05865341186523443), (73.0, 86.0, -0.06534347534179685), (73.0, 84.0, -0.055283279418945286), (74.0, 84.0, -0.05242637634277347), (71.0, 84.0, -0.06615165710449222), (76.0, 86.0, -0.04972129821777349), (75.0, 86.0, -0.05237182617187497), (75.0, 81.0, -0.0318158721923828), (77.0, 81.0, -0.021256179809570286), (77.0, 80.0, -0.015765075683593754), (77.0, 82.0, -0.02387001037597658), (78.0, 80.0, -0.008923873901367174), (79.0, 80.0, -0.006327819824218706), (0, 75.0, -0.053296203613281246), (0, 72.0, -0.02260147094726561), (0, 61.0, 0.09294761657714834), (0, 62.0, 0.08457633972167966), (0, 68.0, 0.016589355468749956), (0, 106.0, -0.3585511016845703), (0, 102.0, -0.31678878784179687), (0, 95.0, -0.24804794311523437), (0, 89.0, -0.19260795593261715), (0, 87.0, -0.1715032958984375), (118.0, 77.0, 0.20343490600585934), (118.0, 82.0, 0.18134567260742185), (106.0, 82.0, 0.12320251464843746), (106.0, 102.0, 0.021296386718749893), (94.0, 102.0, -0.04127494812011723), (94.0, 0, 0.23717460632324228), (80.0, 0, 0.09689453125000003), (49.0, 110.0, -0.3024073791503906), (40.0, 116.0, -0.3814431381225586), (36.0, 116.0, -0.40388210296630855), (36.0, 0, -0.3446636581420899), (33.0, 0, -0.37288734436035154), (31.0, 0, -0.3877776145935059), (35.0, 0, -0.3532496643066406), (38.0, 0, -0.3215702438354492), (65.0, 0, -0.04784912109374995), (72.0, 0, 0.02271087646484382), (73.0, 0, 0.027125473022461044), (70.0, 0, -0.0043144989013671475), (64.0, 0, -0.05518966674804693), (50.0, 0, -0.1993521881103516), (68.0, 114.0, -0.23256851196289063), (68.0, 103.0, -0.1760101318359375), (80.0, 103.0, -0.1166219329833984), (80.0, 93.0, -0.06732818603515622), (90.0, 93.0, -0.01758895874023436), (90.0, 79.0, 0.05588851928710947), (97.0, 79.0, 0.09250251770019524), (97.0, 70.0, 0.13425971984863283), (101.0, 59.0, 0.20987159729003912), (102.0, 58.0, 0.22131652832031246), (102.0, 51.0, 0.25623031616210934), (97.0, 51.0, 0.23469497680664064), (97.0, 46.0, 0.2554435729980469), (94.0, 46.0, 0.23577774047851552), (94.0, 49.0, 0.22458679199218756), (90.0, 49.0, 0.20392745971679682), (83.0, 49.0, 0.16944305419921868), (83.0, 52.0, 0.15232627868652338), (81.0, 53.0, 0.13625297546386728), (81.0, 59.0, 0.10957168579101562), (75.0, 59.0, 0.08063674926757813), (75.0, 61.0, 0.07032211303710945), (73.0, 61.0, 0.0638034820556641), (68.0, 75.0, -0.036772766113281286), (66.0, 75.0, -0.04925430297851563), (66.0, 78.0, -0.059558105468749956), (62.0, 78.0, -0.08166511535644527), (61.0, 79.0, -0.09192878723144526), (59.0, 79.0, -0.09802772521972658), (59.0, 78.0, -0.09181236267089843), (61.0, 77.0, -0.08111434936523443), (61.0, 78.0, -0.08486343383789063), (64.0, 75.0, -0.05573959350585933), (64.0, 74.0, -0.04612159729003906), (65.0, 74.0, -0.040865554809570326), (65.0, 73.0, -0.03726676940917972), (70.0, 65.0, 0.029660110473632706), (66.0, 70.0, -0.019799194335937464), (69.0, 66.0, 0.017378845214843786), (65.0, 67.0, -0.00865097045898433), (65.0, 115.0, -0.2476751708984375), (53.0, 115.0, -0.3093748474121094), (53.0, 100.0, -0.23439422607421878), (45.0, 100.0, -0.2754968643188477), (45.0, 96.0, -0.25710712432861327), (37.0, 96.0, -0.2991300582885742), (37.0, 97.0, -0.3025869369506836), (29.0, 103.0, -0.36729568481445307), (25.0, 103.0, -0.3904671859741211), (25.0, 98.0, -0.3662684631347656), (23.0, 90.0, -0.3370280838012696), (21.0, 85.0, -0.31689765930175784), (73.0, 87.0, -0.07140846252441402), (73.0, 85.0, -0.06008438110351566), (75.0, 85.0, -0.05226638793945315), (75.0, 87.0, -0.060521469116210924), (74.0, 87.0, -0.06593925476074214), (74.0, 85.0, -0.05561119079589849), (76.0, 85.0, -0.04523002624511718), (76.0, 84.0, -0.04379280090332027), (78.0, 84.0, -0.032830963134765634), (78.0, 81.0, -0.01787826538085935), (79.0, 81.0, -0.010798263549804732), (79.0, 83.0, -0.021015243530273398), (76.0, 83.0, -0.0375875854492187), (76.0, 82.0, -0.03279426574707034), (80.0, 82.0, -0.010002288818359406), (78.0, 82.0, -0.015967864990234393), (78.0, 78.0, -0.00010200500488277697), (84.0, 78.0, 0.02672760009765618), (84.0, 79.0, 0.022263793945312527), (0, 78.0, -0.08118347167968754), (0, 74.0, -0.038076629638671866), (0, 71.0, -0.011204986572265652), (0, 69.0, 0.008150177001953196), (0, 67.0, 0.028982391357421866), (0, 63.0, 0.07452224731445312), (0, 64.0, 0.06496803283691399), (0, 65.0, 0.04889869689941406), (0, 66.0, 0.0359649658203125), (0, 99.0, -0.28571250915527346), (0, 104.0, -0.3425091552734375), (0, 105.0, -0.3483409118652344), (0, 98.0, -0.2789222717285156), (0, 101.0, -0.3093466186523437), (0, 97.0, -0.27340095520019536), (0, 94.0, -0.24414398193359377), (0, 93.0, -0.2251174926757813), (0, 92.0, -0.22164451599121093), (0, 91.0, -0.21307868957519527), (0, 90.0, -0.20210227966308592), (0, 88.0, -0.17523490905761718), (0, 86.0, -0.16075317382812504), (0, 85.0, -0.15030563354492188), (0, 83.0, -0.1267245483398437), (0, 82.0, -0.12198547363281254), (0, 76.0, -0.05615936279296874), (0, 81.0, -0.11316719055175783), (0, 80.0, -0.10479774475097658), (0, 77.0, -0.07214363098144527), (0, 79.0, -0.09263008117675786), (119.0, 79.0, 0.19886703491210933), (119.0, 82.0, 0.18481887817382803), (104.0, 82.0, 0.11196327209472656), (104.0, 105.0, -0.005118484497070308), (93.0, 0, 0.2343029022216796), (78.0, 0, 0.07900917053222667), (58.0, 0, -0.12432819366455083), (48.0, 119.0, -0.3536188507080078), (29.0, 0, -0.40916526794433594), (27.0, 0, -0.4340858268737793), (28.0, 0, -0.4162531852722168), (30.0, 0, -0.4000714874267578), (32.0, 0, -0.3795893096923828), (37.0, 0, -0.32819953918457034), (57.0, 0, -0.13223403930664057), (74.0, 0, 0.03946426391601565), (71.0, 0, 0.006249847412109322), (67.0, 0, -0.027991256713867152), (66.0, 0, -0.037547760009765674), (63.0, 0, -0.06834033966064457), (61.0, 0, -0.08602863311767583), (60.0, 0, -0.0989392852783203), (59.0, 0, -0.1099749755859375), (54.0, 0, -0.15682907104492183), (45.0, 0, -0.25470283508300784), (48.0, 0, -0.21992500305175777), (55.0, 0, -0.14594009399414065), (51.0, 0, -0.19124675750732423), (47.0, 0, -0.22778209686279294), (44.0, 0, -0.2639446258544922), (42.0, 0, -0.2812130737304688), (39.0, 0, -0.30976886749267574), (40.0, 0, -0.3047011566162109), (41.0, 0, -0.2854526519775391), (43.0, 0, -0.2728940582275391), (46.0, 0, -0.23744350433349615), (49.0, 0, -0.21251377105712888), (52.0, 0, -0.17580032348632812), (53.0, 0, -0.17066654205322263), (56.0, 0, -0.13648979187011723), (62.0, 0, -0.08274669647216792), (62.0, 114.0, -0.26158931732177737), (72.0, 114.0, -0.21177337646484373), (72.0, 103.0, -0.1550900268554688), (83.0, 101.0, -0.08871467590332027), (83.0, 91.0, -0.04162170410156252), (94.0, 91.0, 0.013631515502929625), (94.0, 78.0, 0.07809974670410158), (95.0, 78.0, 0.08434295654296875), (95.0, 66.0, 0.14480285644531254), (101.0, 57.0, 0.22192169189453126), (100.0, 56.0, 0.21977310180664067), (100.0, 49.0, 0.25440605163574226), (97.0, 49.0, 0.23851280212402348), (97.0, 48.0, 0.24327415466308588), (89.0, 48.0, 0.20567169189453116), (89.0, 49.0, 0.20280868530273444), (87.0, 49.0, 0.1889405059814453), (87.0, 50.0, 0.18242576599121096), (86.0, 50.0, 0.18005332946777353), (86.0, 52.0, 0.17166252136230464), (81.0, 52.0, 0.144981918334961), (81.0, 55.0, 0.12822746276855468), (78.0, 55.0, 0.11330482482910154), (78.0, 58.0, 0.09812919616699212), (76.0, 63.0, 0.0682905578613282), (73.0, 63.0, 0.05260948181152347), (73.0, 67.0, 0.028822174072265616), (69.0, 71.0, -0.01038307189941401), (67.0, 73.0, -0.02971443176269528), (64.0, 73.0, -0.04264015197753901), (64.0, 77.0, -0.0623006439208984), (64.0, 78.0, -0.07125518798828123), (60.0, 78.0, -0.08843597412109372), (60.0, 79.0, -0.09879650115966798), (60.0, 77.0, -0.0854047393798828), (60.0, 75.0, -0.0753618621826172), (61.0, 75.0, -0.06945537567138671), (63.0, 75.0, -0.06158737182617191), (63.0, 72.0, -0.04626785278320311), (64.0, 72.0, -0.04273513793945316), (64.0, 71.0, -0.03668952941894532), (67.0, 72.0, -0.02608566284179692), (66.0, 72.0, -0.028413772583007812), (66.0, 68.0, -0.008647994995117148), (68.0, 66.0, 0.009597930908203045), (71.0, 66.0, 0.025633544921874973), (72.0, 66.0, 0.029622726440429625), (73.0, 66.0, 0.03358482360839843), (73.0, 65.0, 0.04020576477050786), (73.0, 64.0, 0.04646675109863274), (72.0, 64.0, 0.040766906738281206), (71.0, 64.0, 0.03548477172851561), (71.0, 65.0, 0.029934158325195304), (72.0, 65.0, 0.03339385986328125), (72.0, 67.0, 0.024964294433593714), (71.0, 67.0, 0.018470916748046795), (71.0, 68.0, 0.013822784423828116), (68.0, 71.0, -0.012519683837890594), (67.0, 71.0, -0.018336944580078174), (67.0, 66.0, 0.005317993164062562), (70.0, 66.0, 0.01928924560546874), (70.0, 69.0, 0.006846847534179634), (67.0, 70.0, -0.01815429687500003), (69.0, 70.0, -0.005848541259765638), (67.0, 68.0, -0.0024567413330077725), (68.0, 69.0, -0.0018598937988281161), (70.0, 67.0, 0.015564193725585929), (67.0, 67.0, -2.426147460932171e-05), (67.0, 69.0, -0.012813568115234375), (69.0, 67.0, 0.013902664184570312), (68.0, 67.0, 0.0068300628662110174), (70.0, 68.0, 0.012786254882812598), (70.0, 70.0, 7.873535156255329e-05), (68.0, 70.0, -0.012414474487304705), (68.0, 68.0, -0.0022505950927734775), (64.0, 68.0, -0.02411415100097658), (64.0, 106.0, -0.2114601898193359), (53.0, 106.0, -0.26294681549072263), (52.0, 97.0, -0.22486106872558598), (42.0, 90.0, -0.23977813720703123), (34.0, 90.0, -0.27946720123291013), (34.0, 84.0, -0.2513168716430664), (27.0, 84.0, -0.2852912902832031), (26.0, 88.0, -0.30761137008666994), (21.0, 90.0, -0.34532587051391606), (18.0, 90.0, -0.36088945388793947), (18.0, 82.0, -0.3201648902893066), (28.0, 82.0, -0.26926282882690433)]
# ilc_data = [(74.0, 84.0, 0.07688598632812493, -0.051257324218749956), (77.0, 85.0, 0.05599525451660159, -0.03733016967773439), (77.0, 84.0, 0.0472311401367187, -0.031487426757812464), (78.0, 81.0, 0.027012863159179668, -0.01800857543945311), (76.0, 83.0, 0.04753360748291019, -0.03168907165527346), (76.0, 79.0, 0.021363029479980422, -0.014242019653320281), (81.0, 81.0, 0.00196655273437496, -0.0013110351562499734), (81.0, 80.0, -0.009744644165039062, 0.006496429443359375), (0, 73.0, 0.02834503173828129, -0.02834503173828129), (0, 67.0, -0.030483856201171777, 0.030483856201171777), (0, 61.0, -0.08520462036132814, 0.08520462036132814), (0, 66.0, -0.03741744995117191, 0.03741744995117191), (0, 102.0, 0.31637847900390625, -0.31637847900390625), (0, 106.0, 0.36435737609863283, -0.36435737609863283), (0, 99.0, 0.28624458312988277, -0.28624458312988277), (0, 97.0, 0.2657305908203125, -0.2657305908203125), (0, 93.0, 0.22626327514648437, -0.22626327514648437), (0, 88.0, 0.17959182739257817, -0.17959182739257817), (0, 87.0, 0.16812507629394535, -0.16812507629394535), (0, 75.0, 0.04919059753417965, -0.04919059753417965), (0, 82.0, 0.11586669921875004, -0.11586669921875004), (118.0, 77.0, -0.30779594421386713, 0.2051972961425781), (118.0, 82.0, -0.2666035079956056, 0.1777356719970704), (102.0, 107.0, 0.03692459106445317, -0.02461639404296878), (90.0, 0, -0.20409210205078132, 0.20409210205078132), (77.0, 0, -0.0749501800537109, 0.0749501800537109), (68.0, 0, 0.01950546264648434, -0.01950546264648434), (41.0, 108.0, 0.5036623764038086, -0.3357749176025391), (35.0, 108.0, 0.5486355972290038, -0.3657570648193359), (34.0, 0, 0.35837615966796876, -0.35837615966796876), (26.0, 0, 0.44024551391601563, -0.44024551391601563), (24.0, 0, 0.46292583465576176, -0.46292583465576176), (23.0, 0, 0.470242862701416, -0.470242862701416), (25.0, 0, 0.4501797866821289, -0.4501797866821289), (32.0, 0, 0.37856163024902345, -0.37856163024902345), (72.0, 0, -0.016060485839843652, 0.016060485839843652), (69.0, 0, 0.006094436645507795, -0.006094436645507795), (65.0, 0, 0.05489471435546878, -0.05489471435546878), (62.0, 0, 0.08411125183105472, -0.08411125183105472), (52.0, 0, 0.18499198913574222, -0.18499198913574222), (47.0, 0, 0.23260391235351563, -0.23260391235351563), (44.0, 0, 0.2617792129516602, -0.2617792129516602), (41.0, 0, 0.2942884063720703, -0.2942884063720703), (57.0, 0, 0.13410392761230472, -0.13410392761230472), (64.0, 112.0, 0.36106121063232416, -0.24070747375488277), (69.0, 112.0, 0.329501838684082, -0.21966789245605467), (69.0, 101.0, 0.2413854217529297, -0.16092361450195314), (81.0, 95.0, 0.10531986236572272, -0.07021324157714848), (81.0, 88.0, 0.0506888580322265, -0.033792572021484335), (90.0, 88.0, -0.016262512207031343, 0.010841674804687562), (90.0, 78.0, -0.09095054626464849, 0.06063369750976566), (96.0, 78.0, -0.13814105987548841, 0.09209403991699228), (96.0, 66.0, -0.22462177276611328, 0.1497478485107422), (100.0, 55.0, -0.33688991546630875, 0.22459327697753917), (97.0, 55.0, -0.3146158218383788, 0.20974388122558585), (97.0, 49.0, -0.36260902404785167, 0.24173934936523445), (95.0, 49.0, -0.3453696441650389, 0.23024642944335927), (95.0, 48.0, -0.352840690612793, 0.23522712707519533), (92.0, 48.0, -0.3276674652099608, 0.21844497680664055), (92.0, 49.0, -0.3164336013793947, 0.2109557342529298), (83.0, 49.0, -0.24978973388671866, 0.16652648925781244), (83.0, 52.0, -0.23321914672851562, 0.15547943115234375), (82.0, 52.0, -0.23052062988281263, 0.1536804199218751), (79.0, 56.0, -0.17757179260253897, 0.11838119506835931), (79.0, 59.0, -0.15023403167724603, 0.10015602111816402), (75.0, 59.0, -0.11505638122558592, 0.07670425415039062), (72.0, 68.0, -0.027150993347167862, 0.01810066223144524), (70.0, 71.0, 0.0012894058227538863, -0.0008596038818359242), (65.0, 71.0, 0.0419381332397461, -0.027958755493164067), (65.0, 76.0, 0.08728706359863275, -0.058191375732421835), (61.0, 76.0, 0.1125797080993653, -0.0750531387329102), (59.0, 78.0, 0.18937477111816403, -0.09660491943359373), (59.0, 77.0, 0.1353467559814453, -0.09023117065429687), (63.0, 73.0, 0.07485717773437495, -0.049904785156249964), (64.0, 71.0, 0.04877174377441412, -0.032514495849609415), (68.0, 72.0, 0.029093856811523378, -0.019395904541015585), (73.0, 64.0, -0.06206954956054689, 0.04137969970703126), (75.0, 63.0, -0.0841928100585938, 0.056128540039062536), (71.0, 63.0, -0.05390441894531239, 0.03593627929687493), (71.0, 66.0, -0.036566276550292875, 0.02437751770019525), (71.0, 64.0, -0.0498478317260741, 0.03323188781738273), (70.0, 64.0, -0.04590076446533198, 0.030600509643554652), (66.0, 68.0, 0.015013046264648444, -0.01000869750976563), (67.0, 72.0, 0.04874954223632816, -0.02321762084960932), (66.0, 67.0, 0.009131126403808587, -0.006087417602539058), (68.0, 66.0, -0.01590442657470703, 0.010602951049804688), (68.0, 71.0, 0.018766136169433567, -0.012510757446289045), (65.0, 67.0, 0.01689857482910151, -0.01126571655273434), (62.0, 110.0, 0.3601153564453125, -0.240076904296875), (52.0, 110.0, 0.4345428657531738, -0.2896952438354492), (51.0, 99.0, 0.35688171386718753, -0.23792114257812502), (42.0, 99.0, 0.4276159286499023, -0.2850772857666015), (42.0, 92.0, 0.3785995101928711, -0.25239967346191405), (34.0, 92.0, 0.4366103553771973, -0.29107357025146485), (34.0, 91.0, 0.423566722869873, -0.282377815246582), (27.0, 95.0, 0.5064959621429443, -0.33766397476196286), (22.0, 95.0, 0.5451927280426025, -0.36346181869506833), (22.0, 93.0, 0.5311998653411865, -0.354133243560791), (19.0, 88.0, 0.5160055732727051, -0.34400371551513675), (18.0, 88.0, 0.5226148509979248, -0.3484099006652832), (18.0, 79.0, 0.45373469352722173, -0.3024897956848145), (18.0, 71.0, 0.394759168624878, -0.263172779083252), (19.0, 71.0, 0.3870963191986083, -0.2580642127990722), (19.0, 65.0, 0.34374426841735845, -0.2291628456115723), (22.0, 65.0, 0.321260347366333, -0.21417356491088868), (73.0, 87.0, 0.1101484680175781, -0.07343231201171874), (71.0, 87.0, 0.12293140411376957, -0.08195426940917971), (71.0, 86.0, 0.109119987487793, -0.07274665832519533), (75.0, 86.0, 0.07806724548339838, -0.05204483032226559), (75.0, 85.0, 0.07192714691162105, -0.047951431274414036), (73.0, 85.0, 0.08901145935058596, -0.05934097290039064), (76.0, 85.0, 0.06675418853759774, -0.04450279235839849), (75.0, 84.0, 0.07008934020996094, -0.046726226806640625), (78.0, 84.0, 0.05492279052734372, -0.033689422607421915), (78.0, 83.0, 0.0513534927368165, -0.023819427490234357), (77.0, 83.0, 0.04280124664306639, -0.02853416442871093), (79.0, 83.0, 0.03001327514648444, -0.020008850097656294), (79.0, 81.0, 0.017531661987304714, -0.011687774658203143), (80.0, 81.0, 0.011112785339355502, -0.007408523559570335), (80.0, 80.0, 0.004677200317382779, -0.003118133544921853), (80.0, 79.0, -0.00119201660156254, 0.0007946777343750266), (0, 74.0, 0.03542778015136716, -0.03542778015136716), (0, 71.0, 0.011731567382812447, -0.011731567382812447), (0, 70.0, -0.004703216552734313, 0.004703216552734313), (0, 68.0, -0.02393951416015616, 0.02393951416015616), (0, 63.0, -0.07037845611572258, 0.07037845611572258), (0, 64.0, -0.0556494140624999, 0.0556494140624999), (0, 65.0, -0.047373886108398544, 0.047373886108398544), (0, 72.0, 0.016373596191406214, -0.016373596191406214), (0, 103.0, 0.333162612915039, -0.333162612915039), (0, 105.0, 0.3491519165039062, -0.3491519165039062), (0, 101.0, 0.306595458984375, -0.306595458984375), (0, 100.0, 0.2996604919433594, -0.2996604919433594), (0, 96.0, 0.26263343811035156, -0.26263343811035156), (0, 94.0, 0.2378098297119141, -0.2378098297119141), (0, 95.0, 0.25186309814453123, -0.25186309814453123), (0, 91.0, 0.21115806579589846, -0.21115806579589846), (0, 92.0, 0.21728202819824216, -0.21728202819824216), (0, 89.0, 0.19250953674316407, -0.19250953674316407), (0, 90.0, 0.1971058654785156, -0.1971058654785156), (0, 86.0, 0.1604061889648437, -0.1604061889648437), (0, 83.0, 0.1349288940429687, -0.1349288940429687), (0, 76.0, 0.05740829467773434, -0.05740829467773434), (0, 80.0, 0.10277244567871091, -0.10277244567871091), (0, 81.0, 0.10782516479492188, -0.10782516479492188), (0, 79.0, 0.08957939147949223, -0.08957939147949223), (0, 78.0, 0.08226867675781246, -0.08226867675781246), (0, 77.0, 0.06636322021484375, -0.06636322021484375), (104.0, 77.0, -0.2088172531127931, 0.1392115020751954), (104.0, 88.0, -0.12490116119384764, 0.08326744079589843), (99.0, 88.0, -0.08064056396484387, 0.05376037597656258), (99.0, 108.0, 0.06993301391601559, -0.04662200927734372), (86.0, 108.0, 0.1679356384277344, -0.11195709228515627), (86.0, 0, -0.15510192871093742, 0.15510192871093742), (73.0, 0, -0.027263336181640563, 0.027263336181640563), (55.0, 0, 0.14740463256835934, -0.14740463256835934), (33.0, 0, 0.37182891845703125, -0.37182891845703125), (29.0, 0, 0.40736349105834957, -0.40736349105834957), (28.0, 0, 0.42230831146240233, -0.42230831146240233), (27.0, 0, 0.4257491874694824, -0.4257491874694824), (30.0, 0, 0.40428989410400396, -0.40428989410400396), (31.0, 0, 0.38881977081298824, -0.38881977081298824), (36.0, 0, 0.3403407287597656, -0.3403407287597656), (70.0, 0, 0.0034873962402344194, -0.0034873962402344194), (67.0, 0, 0.03155281066894533, -0.03155281066894533), (64.0, 0, 0.057861328125, -0.057861328125), (63.0, 0, 0.07285636901855463, -0.07285636901855463), (61.0, 0, 0.08745517730712893, -0.08745517730712893), (60.0, 0, 0.09943946838378903, -0.09943946838378903), (59.0, 0, 0.10663700103759766, -0.10663700103759766), (53.0, 0, 0.16894573211669917, -0.16894573211669917), (48.0, 0, 0.22472423553466792, -0.22472423553466792), (51.0, 0, 0.18555152893066407, -0.18555152893066407), (54.0, 0, 0.16329746246337895, -0.16329746246337895), (49.0, 0, 0.2108427047729492, -0.2108427047729492), (46.0, 0, 0.23831169128417973, -0.23831169128417973), (43.0, 0, 0.2726223373413086, -0.2726223373413086), (40.0, 0, 0.299216423034668, -0.299216423034668), (37.0, 0, 0.3265444946289062, -0.3265444946289062), (38.0, 0, 0.3219050216674805, -0.3219050216674805), (39.0, 0, 0.30895759582519533, -0.30895759582519533), (42.0, 0, 0.2845602035522461, -0.2845602035522461), (45.0, 0, 0.25296550750732427, -0.25296550750732427), (50.0, 0, 0.1969140625, -0.1969140625), (56.0, 0, 0.14207695007324217, -0.14207695007324217), (60.0, 119.0, 0.4427661895751953, -0.2951774597167969), (69.0, 119.0, 0.37363140106201176, -0.24908760070800784), (69.0, 108.0, 0.2892035293579102, -0.19280235290527348), (79.0, 108.0, 0.21335460662841804, -0.14223640441894536), (79.0, 95.0, 0.1183176040649414, -0.07887840270996094), (93.0, 84.0, -0.06461952209472666, 0.04307968139648444), (100.0, 84.0, -0.11756240844726573, 0.07837493896484382), (100.0, 72.0, -0.2111794281005861, 0.14078628540039073), (103.0, 72.0, -0.23660202026367194, 0.1577346801757813), (103.0, 64.0, -0.2953462600708008, 0.1968975067138672), (103.0, 61.0, -0.31663398742675775, 0.21108932495117183), (105.0, 61.0, -0.32982501983642565, 0.2198833465576171), (105.0, 52.0, -0.3975207138061525, 0.26501380920410167), (102.0, 52.0, -0.3738633728027343, 0.2492422485351562), (102.0, 47.0, -0.40686870574951184, 0.2712458038330079), (97.0, 47.0, -0.37734088897705065, 0.2515605926513671), (93.0, 47.0, -0.34586757659912104, 0.23057838439941403), (90.0, 47.0, -0.32326824188232406, 0.2155121612548827), (90.0, 49.0, -0.308543357849121, 0.205695571899414), (85.0, 49.0, -0.2699354553222657, 0.1799569702148438), (85.0, 53.0, -0.24345989227294929, 0.16230659484863286), (82.0, 53.0, -0.21869407653808592, 0.14579605102539062), (82.0, 56.0, -0.1968445587158204, 0.13122970581054694), (78.0, 56.0, -0.17161663055419918, 0.11441108703613279), (78.0, 59.0, -0.14507904052734388, 0.09671936035156259), (74.0, 59.0, -0.1153778457641601, 0.0769185638427734), (73.0, 63.0, -0.09810062408447262, 0.050709304809570366), (73.0, 68.0, -0.03500598907470698, 0.023337326049804652), (66.0, 72.0, 0.05657859802246096, -0.029133377075195366), (66.0, 76.0, 0.08084472656250008, -0.05389648437500005), (63.0, 77.0, 0.10497619628906257, -0.06998413085937505), (62.0, 77.0, 0.11534334182739253, -0.07689556121826169), (62.0, 79.0, 0.13171674728393562, -0.08781116485595708), (60.0, 79.0, 0.14528657913208015, -0.09685771942138677), (60.0, 80.0, 0.14907291412353518, -0.09938194274902346), (58.0, 78.0, 0.14798646926879888, -0.09865764617919925), (58.0, 77.0, 0.13998727798461907, -0.09332485198974605), (61.0, 77.0, 0.11953136444091794, -0.0796875762939453), (61.0, 78.0, 0.12392246246337885, -0.0826149749755859), (60.0, 78.0, 0.1849690055847168, -0.08651573181152339), (60.0, 75.0, 0.11019607543945314, -0.07346405029296876), (63.0, 75.0, 0.11057067871093751, -0.05875289916992188), (63.0, 76.0, 0.09282485961914066, -0.06188323974609378), (64.0, 76.0, 0.08678878784179689, -0.05785919189453126), (64.0, 73.0, 0.06676082611083978, -0.04450721740722652), (66.0, 73.0, 0.051457557678222576, -0.034305038452148384), (66.0, 71.0, 0.03542633056640632, -0.023617553710937544), (71.0, 67.0, -0.0546771621704103, 0.01745582580566407), (71.0, 65.0, -0.041199989318847496, 0.02746665954589833), (74.0, 65.0, -0.06340038299560558, 0.042266921997070384), (74.0, 63.0, -0.11340103149414049, 0.05215217590332033), (72.0, 63.0, -0.06881114959716794, 0.045874099731445295), (72.0, 66.0, -0.046862983703613414, 0.031241989135742276), (73.0, 66.0, -0.05184745788574219, 0.034564971923828125), (73.0, 65.0, -0.056580276489257786, 0.03772018432617186), (72.0, 65.0, -0.07240283966064454, 0.032444229125976554), (72.0, 67.0, -0.03194641113281238, 0.02129760742187492), (67.0, 71.0, 0.031090278625488355, -0.020726852416992236), (66.0, 70.0, 0.030401000976562453, -0.02026733398437497), (65.0, 72.0, 0.047723007202148504, -0.03181533813476567), (65.0, 70.0, 0.03640800476074224, -0.02427200317382816), (69.0, 70.0, 0.012456779479980529, -0.008304519653320352), (69.0, 66.0, -0.02263538360595707, 0.015090255737304714), (70.0, 66.0, -0.026628799438476403, 0.01775253295898427), (70.0, 68.0, -0.011022720336913983, 0.007348480224609322), (70.0, 69.0, -0.008953742980957191, 0.005969161987304794), (65.0, 68.0, 0.02154464721679694, -0.014363098144531294), (69.0, 68.0, -0.00786621093749984, 0.005244140624999893), (69.0, 69.0, 0.005055313110351511, -0.0008768463134765092), (67.0, 67.0, -0.0006493377685545809, 0.00043289184570305395), (68.0, 68.0, -0.006380195617675888, 0.0042534637451172586), (68.0, 70.0, 0.015170402526855475, -0.010113601684570317), (67.0, 70.0, 0.02641376495361336, -0.019444808959960924), (67.0, 69.0, 0.012258529663085993, -0.014026718139648398), (54.0, 69.0, 0.11826913833618163, -0.07884609222412109), (54.0, 94.0, 0.30499179840087887, -0.2033278656005859), (43.0, 81.0, 0.2816247367858886, -0.18774982452392575), (34.0, 81.0, 0.3546212196350097, -0.2364141464233398), (34.0, 70.0, 0.27169012069702153, -0.8), (25.0, 70.0, 0.33882677078247064, -0.22588451385498043), (24.0, 58.0, 0.2559647369384765, -0.17064315795898433), (24.0, 58.0, 0.2559647369384765, -0.17064315795898433)]
# ilc_data = [(77.0, 85.0, 0.05599525451660159, -0.03733016967773439), (78.0, 81.0, 0.027012863159179668, -0.01800857543945311), (76.0, 83.0, 0.04753360748291019, -0.03168907165527346), (76.0, 79.0, 0.021363029479980422, -0.014242019653320281), (81.0, 80.0, -0.009744644165039062, 0.006496429443359375), (0, 106.0, 0.36435737609863283, -0.36435737609863283), (0, 99.0, 0.28624458312988277, -0.28624458312988277), (0, 87.0, 0.16812507629394535, -0.16812507629394535), (0, 82.0, 0.11586669921875004, -0.11586669921875004), (118.0, 77.0, -0.30779594421386713, 0.2051972961425781), (118.0, 82.0, -0.2666035079956056, 0.1777356719970704), (102.0, 107.0, 0.03692459106445317, -0.02461639404296878), (90.0, 0, -0.20409210205078132, 0.20409210205078132), (77.0, 0, -0.0749501800537109, 0.0749501800537109), (41.0, 108.0, 0.5036623764038086, -0.3357749176025391), (35.0, 108.0, 0.5486355972290038, -0.3657570648193359), (34.0, 0, 0.35837615966796876, -0.35837615966796876), (24.0, 0, 0.46292583465576176, -0.46292583465576176), (23.0, 0, 0.470242862701416, -0.470242862701416), (25.0, 0, 0.4501797866821289, -0.4501797866821289), (32.0, 0, 0.37856163024902345, -0.37856163024902345), (72.0, 0, -0.016060485839843652, 0.016060485839843652), (57.0, 0, 0.13410392761230472, -0.13410392761230472), (64.0, 112.0, 0.36106121063232416, -0.24070747375488277), (69.0, 112.0, 0.329501838684082, -0.21966789245605467), (69.0, 101.0, 0.2413854217529297, -0.16092361450195314), (81.0, 95.0, 0.10531986236572272, -0.07021324157714848), (81.0, 88.0, 0.0506888580322265, -0.033792572021484335), (90.0, 88.0, -0.016262512207031343, 0.010841674804687562), (90.0, 78.0, -0.09095054626464849, 0.06063369750976566), (96.0, 78.0, -0.13814105987548841, 0.09209403991699228), (96.0, 66.0, -0.22462177276611328, 0.1497478485107422), (100.0, 55.0, -0.33688991546630875, 0.22459327697753917), (97.0, 55.0, -0.3146158218383788, 0.20974388122558585), (97.0, 49.0, -0.36260902404785167, 0.24173934936523445), (95.0, 49.0, -0.3453696441650389, 0.23024642944335927), (95.0, 48.0, -0.352840690612793, 0.23522712707519533), (83.0, 49.0, -0.24978973388671866, 0.16652648925781244), (83.0, 52.0, -0.23321914672851562, 0.15547943115234375), (82.0, 52.0, -0.23052062988281263, 0.1536804199218751), (72.0, 68.0, -0.027150993347167862, 0.01810066223144524), (70.0, 71.0, 0.0012894058227538863, -0.0008596038818359242), (65.0, 76.0, 0.08728706359863275, -0.058191375732421835), (59.0, 77.0, 0.1353467559814453, -0.09023117065429687), (63.0, 73.0, 0.07485717773437495, -0.049904785156249964), (73.0, 64.0, -0.06206954956054689, 0.04137969970703126), (75.0, 63.0, -0.0841928100585938, 0.056128540039062536), (71.0, 63.0, -0.05390441894531239, 0.03593627929687493), (66.0, 68.0, 0.015013046264648444, -0.01000869750976563), (67.0, 72.0, 0.04874954223632816, -0.02321762084960932), (66.0, 67.0, 0.009131126403808587, -0.006087417602539058), (68.0, 66.0, -0.01590442657470703, 0.010602951049804688), (68.0, 71.0, 0.018766136169433567, -0.012510757446289045), (65.0, 67.0, 0.01689857482910151, -0.01126571655273434), (62.0, 110.0, 0.3601153564453125, -0.240076904296875), (52.0, 110.0, 0.4345428657531738, -0.2896952438354492), (51.0, 99.0, 0.35688171386718753, -0.23792114257812502), (42.0, 99.0, 0.4276159286499023, -0.2850772857666015), (42.0, 92.0, 0.3785995101928711, -0.25239967346191405), (34.0, 92.0, 0.4366103553771973, -0.29107357025146485), (34.0, 91.0, 0.423566722869873, -0.282377815246582), (27.0, 95.0, 0.5064959621429443, -0.33766397476196286), (22.0, 95.0, 0.5451927280426025, -0.36346181869506833), (22.0, 93.0, 0.5311998653411865, -0.354133243560791), (19.0, 88.0, 0.5160055732727051, -0.34400371551513675), (18.0, 88.0, 0.5226148509979248, -0.3484099006652832), (18.0, 79.0, 0.45373469352722173, -0.3024897956848145), (18.0, 71.0, 0.394759168624878, -0.263172779083252), (19.0, 71.0, 0.3870963191986083, -0.2580642127990722), (19.0, 65.0, 0.34374426841735845, -0.2291628456115723), (22.0, 65.0, 0.321260347366333, -0.21417356491088868), (73.0, 87.0, 0.1101484680175781, -0.07343231201171874), (71.0, 87.0, 0.12293140411376957, -0.08195426940917971), (71.0, 86.0, 0.109119987487793, -0.07274665832519533), (75.0, 86.0, 0.07806724548339838, -0.05204483032226559), (75.0, 85.0, 0.07192714691162105, -0.047951431274414036), (75.0, 84.0, 0.07008934020996094, -0.046726226806640625), (78.0, 84.0, 0.05492279052734372, -0.033689422607421915), (78.0, 83.0, 0.0513534927368165, -0.023819427490234357), (77.0, 83.0, 0.04280124664306639, -0.02853416442871093), (79.0, 83.0, 0.03001327514648444, -0.020008850097656294), (79.0, 81.0, 0.017531661987304714, -0.011687774658203143), (80.0, 80.0, 0.004677200317382779, -0.003118133544921853), (80.0, 79.0, -0.00119201660156254, 0.0007946777343750266), (0, 71.0, 0.011731567382812447, -0.011731567382812447), (0, 103.0, 0.333162612915039, -0.333162612915039), (0, 105.0, 0.3491519165039062, -0.3491519165039062), (0, 100.0, 0.2996604919433594, -0.2996604919433594), (0, 96.0, 0.26263343811035156, -0.26263343811035156), (0, 86.0, 0.1604061889648437, -0.1604061889648437), (104.0, 77.0, -0.2088172531127931, 0.1392115020751954), (104.0, 88.0, -0.12490116119384764, 0.08326744079589843), (99.0, 88.0, -0.08064056396484387, 0.05376037597656258), (99.0, 108.0, 0.06993301391601559, -0.04662200927734372), (86.0, 108.0, 0.1679356384277344, -0.11195709228515627), (86.0, 0, -0.15510192871093742, 0.15510192871093742), (55.0, 0, 0.14740463256835934, -0.14740463256835934), (30.0, 0, 0.40428989410400396, -0.40428989410400396), (36.0, 0, 0.3403407287597656, -0.3403407287597656), (70.0, 0, 0.0034873962402344194, -0.0034873962402344194), (63.0, 0, 0.07285636901855463, -0.07285636901855463), (59.0, 0, 0.10663700103759766, -0.10663700103759766), (51.0, 0, 0.18555152893066407, -0.18555152893066407), (43.0, 0, 0.2726223373413086, -0.2726223373413086), (40.0, 0, 0.299216423034668, -0.299216423034668), (37.0, 0, 0.3265444946289062, -0.3265444946289062), (38.0, 0, 0.3219050216674805, -0.3219050216674805), (60.0, 119.0, 0.4427661895751953, -0.2951774597167969), (69.0, 119.0, 0.37363140106201176, -0.24908760070800784), (69.0, 108.0, 0.2892035293579102, -0.19280235290527348), (79.0, 108.0, 0.21335460662841804, -0.14223640441894536), (79.0, 95.0, 0.1183176040649414, -0.07887840270996094), (93.0, 84.0, -0.06461952209472666, 0.04307968139648444), (100.0, 84.0, -0.11756240844726573, 0.07837493896484382), (100.0, 72.0, -0.2111794281005861, 0.14078628540039073), (103.0, 72.0, -0.23660202026367194, 0.1577346801757813), (103.0, 64.0, -0.2953462600708008, 0.1968975067138672), (103.0, 61.0, -0.31663398742675775, 0.21108932495117183), (105.0, 61.0, -0.32982501983642565, 0.2198833465576171), (105.0, 52.0, -0.3975207138061525, 0.26501380920410167), (102.0, 52.0, -0.3738633728027343, 0.2492422485351562), (102.0, 47.0, -0.40686870574951184, 0.2712458038330079), (97.0, 47.0, -0.37734088897705065, 0.2515605926513671), (93.0, 47.0, -0.34586757659912104, 0.23057838439941403), (90.0, 47.0, -0.32326824188232406, 0.2155121612548827), (90.0, 49.0, -0.308543357849121, 0.205695571899414), (85.0, 49.0, -0.2699354553222657, 0.1799569702148438), (85.0, 53.0, -0.24345989227294929, 0.16230659484863286), (82.0, 53.0, -0.21869407653808592, 0.14579605102539062), (82.0, 56.0, -0.1968445587158204, 0.13122970581054694), (78.0, 56.0, -0.17161663055419918, 0.11441108703613279), (78.0, 59.0, -0.14507904052734388, 0.09671936035156259), (74.0, 59.0, -0.1153778457641601, 0.0769185638427734), (73.0, 63.0, -0.09810062408447262, 0.050709304809570366), (73.0, 68.0, -0.03500598907470698, 0.023337326049804652), (66.0, 76.0, 0.08084472656250008, -0.05389648437500005), (62.0, 77.0, 0.11534334182739253, -0.07689556121826169), (60.0, 79.0, 0.14528657913208015, -0.09685771942138677), (60.0, 80.0, 0.14907291412353518, -0.09938194274902346), (58.0, 78.0, 0.14798646926879888, -0.09865764617919925), (58.0, 77.0, 0.13998727798461907, -0.09332485198974605), (61.0, 77.0, 0.11953136444091794, -0.0796875762939453), (60.0, 75.0, 0.11019607543945314, -0.07346405029296876), (63.0, 75.0, 0.11057067871093751, -0.05875289916992188), (63.0, 76.0, 0.09282485961914066, -0.06188323974609378), (64.0, 76.0, 0.08678878784179689, -0.05785919189453126), (64.0, 73.0, 0.06676082611083978, -0.04450721740722652), (66.0, 73.0, 0.051457557678222576, -0.034305038452148384), (74.0, 63.0, -0.11340103149414049, 0.05215217590332033), (72.0, 63.0, -0.06881114959716794, 0.045874099731445295), (73.0, 65.0, -0.056580276489257786, 0.03772018432617186), (67.0, 71.0, 0.031090278625488355, -0.020726852416992236), (65.0, 72.0, 0.047723007202148504, -0.03181533813476567), (65.0, 68.0, 0.02154464721679694, -0.014363098144531294), (67.0, 67.0, -0.0006493377685545809, 0.00043289184570305395), (54.0, 69.0, 0.11826913833618163, -0.07884609222412109), (54.0, 94.0, 0.30499179840087887, -0.2033278656005859), (43.0, 81.0, 0.2816247367858886, -0.18774982452392575), (34.0, 81.0, 0.3546212196350097, -0.2364141464233398), (34.0, 70.0, 0.27169012069702153, -0.8), (25.0, 70.0, 0.33882677078247064, -0.22588451385498043), (24.0, 58.0, 0.2559647369384765, -0.17064315795898433), (24.0, 58.0, 0.2559647369384765, -0.17064315795898433), (72.0, 84.0, 0.09002929687500005, -0.060019531250000036), (73.0, 84.0, 0.08743389129638668, -0.058289260864257786), (73.0, 85.0, 0.08377693176269524, -0.055851287841796826), (76.0, 85.0, 0.09011730194091805, -0.0434580230712891), (76.0, 86.0, 0.07348285675048827, -0.04898857116699218), (74.0, 84.0, 0.07667083740234382, -0.051113891601562544), (76.0, 84.0, 0.0607208633422851, -0.0404805755615234), (76.0, 82.0, 0.04969539642333981, -0.03313026428222654), (77.0, 82.0, 0.03867370605468751, -0.025782470703125004), (77.0, 84.0, 0.048809051513671875, -0.03253936767578125), (80.0, 84.0, 0.02551609039306646, -0.017010726928710973), (80.0, 81.0, 0.00784732818603523, -0.005231552124023486), (81.0, 81.0, -0.0012816619873047275, 0.001229324340820348), (81.0, 79.0, -0.012663345336914156, 0.008442230224609437), (0, 73.0, 0.03071777343750004, -0.03071777343750004), (0, 70.0, -0.0020426177978516424, 0.0020426177978516424), (0, 67.0, -0.02800094604492198, 0.02800094604492198), (0, 68.0, -0.02188003540039052, 0.02188003540039052), (0, 61.0, -0.08510147094726572, 0.08510147094726572), (0, 63.0, -0.07054229736328121, 0.07054229736328121), (0, 65.0, -0.0513484191894531, 0.0513484191894531), (0, 64.0, -0.056806793212890616, 0.056806793212890616), (0, 66.0, -0.04466659545898444, 0.04466659545898444), (0, 75.0, 0.04924324035644534, -0.04924324035644534), (0, 92.0, 0.21585556030273434, -0.21585556030273434), (0, 98.0, 0.2812808990478516, -0.2812808990478516), (0, 102.0, 0.31531295776367185, -0.31531295776367185), (0, 101.0, 0.3084414672851562, -0.3084414672851562), (0, 97.0, 0.2669129943847657, -0.2669129943847657), (0, 94.0, 0.2388909912109375, -0.2388909912109375), (0, 95.0, 0.24917366027832033, -0.24917366027832033), (0, 93.0, 0.2269413757324219, -0.2269413757324219), (0, 91.0, 0.20944580078124997, -0.20944580078124997), (0, 90.0, 0.20161293029785154, -0.20161293029785154), (0, 88.0, 0.18138488769531247, -0.18138488769531247), (0, 89.0, 0.18569404602050776, -0.18569404602050776), (0, 85.0, 0.1520294952392578, -0.1520294952392578), (0, 83.0, 0.12892074584960933, -0.12892074584960933), (0, 76.0, 0.06026222229003908, -0.06026222229003908), (0, 74.0, 0.04080780029296871, -0.04080780029296871), (0, 72.0, 0.023261337280273464, -0.023261337280273464), (0, 80.0, 0.09779220581054693, -0.09779220581054693), (0, 81.0, 0.11131362915039067, -0.11131362915039067), (0, 79.0, 0.09468582153320315, -0.09468582153320315), (0, 78.0, 0.07751625061035161, -0.07751625061035161), (0, 77.0, 0.07384712219238276, -0.07384712219238276), (116.0, 77.0, -0.29217063903808604, 0.1947804260253907), (116.0, 86.0, -0.22718616485595688, 0.1514574432373046), (101.0, 116.0, 0.11503040313720697, -0.07668693542480465), (88.0, 116.0, 0.20874607086181635, -0.1391640472412109), (88.0, 0, -0.18056221008300777, 0.18056221008300777), (79.0, 0, -0.08689903259277343, 0.08689903259277343), (35.0, 0, 0.3503985977172852, -0.3503985977172852), (31.0, 0, 0.3888886642456054, -0.3888886642456054), (28.0, 0, 0.4185028076171875, -0.4185028076171875), (26.0, 0, 0.4377658462524414, -0.4377658462524414), (27.0, 0, 0.4307091903686523, -0.4307091903686523), (29.0, 0, 0.4064239311218262, -0.4064239311218262), (33.0, 0, 0.36994911193847657, -0.36994911193847657), (39.0, 0, 0.3135230255126953, -0.3135230255126953), (68.0, 0, 0.02353530883789068, -0.02353530883789068), (76.0, 0, -0.05953872680664052, 0.05953872680664052), (73.0, 0, -0.025548324584961035, 0.025548324584961035), (71.0, 0, -0.007901306152343857, 0.007901306152343857), (69.0, 0, 0.009851150512695361, -0.009851150512695361), (67.0, 0, 0.03339073181152341, -0.03339073181152341), (65.0, 0, 0.0532112884521484, -0.0532112884521484), (62.0, 0, 0.07622810363769528, -0.07622810363769528), (61.0, 0, 0.08645034790039063, -0.08645034790039063), (60.0, 0, 0.09671585083007816, -0.09671585083007816), (56.0, 0, 0.14373535156249995, -0.14373535156249995), (47.0, 0, 0.2326945877075195, -0.2326945877075195), (48.0, 0, 0.2240704345703125, -0.2240704345703125), (45.0, 0, 0.2458256149291992, -0.2458256149291992), (52.0, 0, 0.18369678497314457, -0.18369678497314457), (54.0, 0, 0.15691795349121096, -0.15691795349121096), (50.0, 0, 0.198640251159668, -0.198640251159668), (44.0, 0, 0.25759124755859375, -0.25759124755859375), (41.0, 0, 0.29371566772460933, -0.29371566772460933), (42.0, 0, 0.27864994049072267, -0.27864994049072267), (46.0, 0, 0.23860176086425777, -0.23860176086425777), (49.0, 0, 0.21126228332519537, -0.21126228332519537), (53.0, 0, 0.1677227020263672, -0.1677227020263672), (58.0, 0, 0.11517848968505862, -0.11517848968505862), (64.0, 0, 0.10157073974609376, -0.05850173950195314), (64.0, 111.0, 0.35089164733886724, -0.23392776489257816), (66.0, 111.0, 0.33627502441406254, -0.22418334960937503), (70.0, 102.0, 0.23937355041503905, -0.15958236694335937), (83.0, 102.0, 0.14477909088134772, -0.09651939392089848), (83.0, 90.0, 0.04992198944091797, -0.03328132629394531), (88.0, 90.0, 0.0127646255493164, -0.008509750366210933), (88.0, 80.0, -0.05922294616699231, 0.039481964111328205), (100.0, 65.0, -0.25873271942138676, 0.17248847961425784), (102.0, 65.0, -0.278148307800293, 0.18543220520019532), (102.0, 57.0, -0.3398577117919922, 0.22657180786132813), (100.0, 57.0, -0.3227140045166015, 0.21514266967773432), (100.0, 49.0, -0.38354930877685534, 0.2556995391845702), (94.0, 48.0, -0.34242393493652334, 0.22828262329101556), (92.0, 48.0, -0.4331453323364257, 0.21902862548828117), (92.0, 49.0, -0.31847511291503905, 0.21231674194335937), (88.0, 49.0, -0.292174072265625, 0.19478271484374998), (88.0, 50.0, -0.28592124938964836, 0.19061416625976557), (86.0, 50.0, -0.27084651947021476, 0.1805643463134765), (86.0, 54.0, -0.2452022552490235, 0.16346817016601567), (81.0, 54.0, -0.2069705200195311, 0.1379803466796874), (81.0, 56.0, -0.19053920745849617, 0.12702613830566412), (79.0, 56.0, -0.22764980316162098, 0.11402488708496095), (79.0, 59.0, -0.14913082122802734, 0.09942054748535156), (75.0, 59.0, -0.12410671234130854, 0.08369392395019526), (75.0, 64.0, -0.08938796997070309, 0.05959197998046872), (71.0, 69.0, -0.009736061096191406, 0.0064907073974609375), (68.0, 72.0, 0.031078720092773404, -0.020719146728515603), (66.0, 72.0, 0.08352684020996098, -0.02821876525878908), (66.0, 77.0, 0.08358867645263668, -0.055725784301757786), (63.0, 77.0, 0.14342397689819342, -0.06942138671874998), (63.0, 78.0, 0.11005176544189454, -0.0733678436279297), (62.0, 78.0, 0.12335151672363276, -0.08223434448242184), (62.0, 79.0, 0.12608379364013667, -0.08405586242675778), (61.0, 79.0, 0.13178964614868166, -0.08785976409912111), (61.0, 78.0, 0.12915555953979496, -0.08610370635986331), (60.0, 78.0, 0.1346016883850098, -0.08973445892333987), (59.0, 78.0, 0.23449035644531246, -0.09562904357910151), (59.0, 76.0, 0.12954425811767578, -0.08636283874511719), (61.0, 76.0, 0.11530563354492185, -0.07687042236328123), (62.0, 74.0, 0.09165121078491206, -0.061100807189941375), (64.0, 74.0, 0.08061613082885744, -0.05374408721923829), (64.0, 71.0, 0.054421291351318346, -0.0362808609008789), (65.0, 71.0, 0.07103382110595702, -0.031265640258789085), (65.0, 70.0, 0.04056026458740242, -0.021630249023437464), (65.0, 69.0, 0.027391662597656297, -0.01826110839843753), (71.0, 68.0, -0.02260299682617173, 0.015068664550781152), (72.0, 66.0, -0.04709701538085931, 0.031398010253906206), (73.0, 66.0, -0.07070755004882812, 0.03734298706054684), (73.0, 62.0, -0.08353431701660152, 0.05568954467773435), (74.0, 62.0, -0.08819561004638665, 0.05879707336425777), (74.0, 65.0, -0.06650985717773439, 0.04433990478515626), (72.0, 65.0, -0.052171211242675875, 0.03478080749511725), (70.0, 65.0, -0.036292877197265705, 0.024195251464843803), (70.0, 64.0, -0.04884052276611328, 0.03256034851074219), (71.0, 65.0, -0.048756752014160076, 0.032504501342773384), (71.0, 67.0, -0.02666416168212904, 0.017776107788086026), (66.0, 71.0, 0.034924736022949265, -0.023283157348632844), (72.0, 67.0, -0.021582984924316262, 0.027972335815429794), (72.0, 64.0, -0.059532279968261825, 0.039688186645507884), (71.0, 64.0, -0.08464569091796859, 0.032437896728515714), (71.0, 66.0, -0.03688934326171878, 0.024592895507812518), (69.0, 66.0, -0.015453834533691424, 0.017428894042968768), (66.0, 70.0, 0.02330242156982415, -0.01564765930175782), (66.0, 69.0, 0.022734374999999973, -0.015156249999999982), (70.0, 69.0, -0.0012213516235349275, 0.0035898590087890536), (70.0, 70.0, -0.004824943542480309, 0.003216629028320206), (69.0, 70.0, 0.019638328552246176, -0.002342910766601536), (69.0, 67.0, -0.016406936645507852, 0.010937957763671902), (70.0, 67.0, -0.029850273132324245, 0.014445266723632777), (70.0, 66.0, -0.02633880615234363, 0.01755920410156242), (67.0, 68.0, 0.009598274230956938, -0.0030932617187500178), (67.0, 69.0, 0.015681495666503953, -0.010454330444335969), (68.0, 68.0, 0.0016001129150391424, -0.0010667419433594283), (68.0, 69.0, 0.006602783203125073, -0.004401855468750049), (67.0, 70.0, 0.021777534484863248, -0.014518356323242165), (68.0, 70.0, 0.024216804504394507, -0.011416778564453112), (63.0, 70.0, 0.04884052276611328, -0.03256034851074219), (63.0, 69.0, 0.04455139160156257, -0.02970092773437505), (53.0, 69.0, 0.12167873382568356, -0.08111915588378904), (53.0, 97.0, 0.32805610656738277, -0.21870407104492184), (42.0, 97.0, 0.4077594566345215, -0.2718396377563477), (42.0, 80.0, 0.2804490852355957, -0.18696605682373046), (33.0, 80.0, 0.348618106842041, -0.23241207122802732), (33.0, 72.0, 0.2962138938903809, -0.19747592926025392), (24.0, 64.0, 0.2984115028381348, -0.19894100189208985), (25.0, 64.0, 0.2876384353637695, -0.19175895690917966)]
ilc_data = []
# print(len(ilc_data))
X_Released = True
Y_Released = True

speed = 0.0  # The current speed of the car
angle = 0.0  # The current angle of the car's wheels

# >> Constants
# Bounds for the racecar speed and angle
MIN_SPEED = 0.15
MAX_SPEED = 1.0
MIN_ANGLE = -1
MAX_ANGLE = 1

# PID controller configurations
DERIV_METHOD = 1        #0 for last point, 1 for five point stencil
INTEGRAL_WINDOW = 0     #0 to disable
kP_ONE_WALL = -1
kP_TWO_WALL = -1.5
kP = kP_ONE_WALL
kI = 0
kD = 0

leftWall = 0
leftClosestAngle = 0
rightWall = 0
rightClosestAngle = 0
DIST_FROM_WALL = 70
LIDAR_MIN_ANGLE = 10
LIDAR_MAX_ANGLE = 60
LIDAR_MAX_DIST = 120
LIDAR_DELTA_THETA = 10
ctr = 0
k_DISTANCE = 0.8
k_ANGLE = 0.2

########################################################################################
# Functions
########################################################################################
def get_camera_image():
    global camera_frames
    if len(camera_frames) < CAMERA_FRAMES_LAG:
        return None
    
    return camera_frames[0]

def update_camera_frames():
    global camera_frames
    if len(camera_frames) >= CAMERA_FRAMES_LAG:
        camera_frames.pop(0)
    camera_frames.append(rc.camera.get_color_image())

def calcIntegral(time, last_error):
    if len(time) >= (1 + len(last_error)):
        integralAcc = 0
        for i in reversed(range(1, 1 + INTEGRAL_WINDOW)):
            integralAcc += (time[i] - time[i - 1]) * last_error[i]
    return 0

def calcDeriv(error, time):
    global last_error
    if DERIV_METHOD == 0:
        if len(last_error) < 2:
            return 0
        else:
            return (error - last_error[-1]) / time 
    elif DERIV_METHOD == 1:
        if len(last_error) >= 4:
            return (-error + 8 * last_error[-1] - 8 * last_error[-3] + last_error[-4]) / 12.0
        else:
            return 0
    
    return 0

# [FUNCTION] Finds contours in the current color image and uses them to update 
# contour_center and contour_area
# def update_contour():
    global contour_center
    global contour_area
    global cone_center
    global cone_area
    global BLUE_SEEN
    global GREEN_SEEN

    image = get_camera_image()
    # image = rc.camera.get_color_image()

    if image is None:
        contour_area = 0
        contour_center = None
    else:
         # Find the contour of the line and update contour_center and contour_area
        cropped_image = rc_utils.crop(image, CROP_FLOOR[0], CROP_FLOOR[1])
        contours = rc_utils.find_contours(cropped_image, cone_color_priority[0][0], cone_color_priority[0][1])
        line_contour = rc_utils.get_largest_contour(contours, MIN_LINE_CONTOUR_AREA)

        if line_contour is None:
            contours = rc_utils.find_contours(cropped_image, cone_color_priority[1][0], cone_color_priority[1][1])
            line_contour = rc_utils.get_largest_contour(contours, MIN_LINE_CONTOUR_AREA)

            if line_contour is None:
                contours = rc_utils.find_contours(cropped_image, cone_color_priority[2][0], cone_color_priority[2][1])
                line_contour = rc_utils.get_largest_contour(contours, MIN_LINE_CONTOUR_AREA)

        # Find cone contour
        # contours = rc_utils.find_contours(image, cone_color[0], cone_color[1])
        # cone_contour = rc_utils.get_largest_contour(contours, MIN_CONE_CONTOUR_AREA)

        # Update center and area variables
        if line_contour is not None:
            contour_area = rc_utils.get_contour_area(line_contour)
            contour_center = rc_utils.get_contour_center(line_contour)
            rc_utils.draw_contour(cropped_image, line_contour)
            rc_utils.draw_circle(cropped_image, contour_center)
        else:
            contour_area = 0
            contour_center = None
        
        # Find the contour of the cone and draw its center
        # if cone_contour is not None:
        #     center = rc_utils.get_contour_center(cone_contour)
        #     rc_utils.draw_contour(image, cone_contour)
        #     rc_utils.draw_circle(image, center)
        #     cone_area = rc_utils.get_contour_area(cone_contour)
        #     cone_center = rc_utils.get_contour_center(cone_contour)
        # else:
        #     cone_center = None
        #     cone_area = 0

        # hsv = cv.cvtColor(image, cv.COLOR_BGR2HSV)
        # row = 410
        # col = 130
        # hsvimg = np.zeros((300, 300, 3), np.uint8)
        # hsvimg[:] = hsv[row][col]
        # BGRimg = cv.cvtColor(hsvimg, cv.COLOR_HSV2BGR)
        # # rc_utils.draw_circle(image, (x, y))
        # cv.circle(image, (col, row), 1, (30, 255, 255), 1)
        # cv.namedWindow("Color", cv.WINDOW_NORMAL)
        # cv.imshow("Color", BGRimg)
        # print(hsv[row][col])
        rc.display.show_color_image(image)

# [FUNCTION] Utility function to create a list based on the provided information and 
# the format given by the constants.
# def create_info_list(color:list, params:tuple, distance:int, priority:list, name:str):
    l = [None for _ in range(NUM_ATTRIBUTES)]
    l.insert(COLOR_IND, color)
    l.insert(PARAMS_IND, params)
    l.insert(DIST_IND, distance)
    l.insert(PRIORITY_IND, priority)
    l.insert(NAME_IND, name)
    return l

def update_distance_from_wall():
    global leftWall, rightWall, leftClosestAngle, rightClosestAngle
    N = rc.lidar.get_num_samples()
    distances = copy.deepcopy(rc.lidar.get_samples())
    distances[distances == 0] = Inf
    distances[distances > LIDAR_MAX_DIST] = Inf
    left_values = distances[int(N - LIDAR_MAX_ANGLE * N // 360) : int(N - LIDAR_MIN_ANGLE * N // 360)]
    right_values = distances[int(LIDAR_MIN_ANGLE * N // 360) : int(LIDAR_MAX_ANGLE * N // 360)]
    leftWall = min(left_values)
    rightWall = min(right_values)
    leftWall = leftWall if leftWall != Inf else 0
    rightWall = rightWall if rightWall != Inf else 0
    leftClosestAngle = np.where(left_values==leftWall)[0][0] // (N // 360) if np.isin(leftWall, left_values) else 0.0
    rightClosestAngle = np.where(right_values==rightWall)[0][0] // (N // 360) if np.isin(rightWall, right_values) else 0.0
    # print(distances[N - LIDAR_MAX * 2 : N - LIDAR_MIN * 2])
    # print()

# [FUNCTION] The start function is run once every time the start button is pressed
def start():
    global speed
    global angle

    # Ignore all warnings
    warnings.filterwarnings("ignore")

    # Set initial driving speed and angle
    speed = 1
    angle = 1
    rc.drive.set_speed_angle(speed, angle)

    # Set update_slow to refresh every half second
    rc.set_update_slow_time(0.5)

    # plt.plot(times, last_readings)
    # plt.ion()
    # plt.show()

    # Print start message
    print(
        ">> Lab 4 - Line Follower\n"
        "\n"
        "Controls:\n"
        "   A button = print current speed and angle\n"
        "   B button = print contour center and area\n"
        "   X button = switch to next target cone"
    )

def compute_ilc_compensation(left, right, angle):
    global ilc_data

    for i in range(len(ilc_data)):
        if ilc_data[i][0] == left and ilc_data[i][1] == right:
            if i + 1 >= len(ilc_data):
                return 0
            else:
                next_err = ilc_data[i + 1][3]
                ang = ilc_data[i][2]
                ilc_data.pop(i)
                return ang - angle + (-0.5 * next_err)
    
    return 0

def compute_angle_error():
    N = rc.lidar.get_num_samples()
    distances = copy.deepcopy(rc.lidar.get_samples())
    distances[distances == 0] = Inf
    distances[distances > LIDAR_MAX_DIST] = Inf
    left_values = distances[int(N - LIDAR_MAX_ANGLE * N // 360) : int(N - LIDAR_MIN_ANGLE * N // 360)]
    right_values = distances[int(LIDAR_MIN_ANGLE * N // 360) : int(LIDAR_MAX_ANGLE * N // 360)]
    left_second_angle = 0
    left_second_distance = 0
    right_second_angle = 0
    right_second_distance = 0
    c_left_angle = 0
    c_right_angle = 0

    leftFlip = False
    if leftWall != 0:
        if leftClosestAngle + LIDAR_DELTA_THETA > LIDAR_MAX_ANGLE:
            left_second_angle = math.radians(leftClosestAngle - LIDAR_DELTA_THETA)
            left_second_distance = left_values[max(int(math.degrees(left_second_angle) * N // 360), len(left_values) - 1)]
        else:
            leftFlip = True
            left_second_angle = math.radians(leftClosestAngle + LIDAR_DELTA_THETA)
            left_second_distance = left_values[min(int(math.degrees(left_second_angle) * N // 360), len(left_values) - 1)]
        
        if left_second_distance == Inf:
            # left_second_distance = next(val for x, val in enumerate(left_values) if val > 0 and val < Inf)
            # left_second_angle = math.radians(next(i for i, x in enumerate(left_values) if x > 0 and x < Inf))
            # print(left_second_angle.shape)
            c_left_angle = 0
        else:
            # print("LEFT")
            # print(left_second_angle)
            # print(left_second_distance)
            # print(leftWall**2 + left_second_distance**2 - 2 * leftWall * rightWall * math.cos(left_second_angle))
            c_left = math.sqrt(leftWall**2 + left_second_distance**2 - 2 * leftWall * left_second_distance * 
                        math.cos(abs(math.radians(leftClosestAngle) - left_second_angle)))
            c_left_angle = rc_utils.remap_range(c_left_angle, 0, 90, 0, 1)
            
            if leftFlip:
                c_left_angle = np.arcsin(left_second_distance * math.sin(abs(math.radians(leftClosestAngle) - left_second_angle)) / c_left)
            else:
                c_left_angle = np.arcsin(leftWall * math.sin(abs(math.radians(leftClosestAngle) - left_second_angle)) / c_left)

            # c_left_angle = 180 - abs(leftClosestAngle - math.degrees(left_second_angle)) - math.degrees(c_left_angle)

            # print(leftWall)
            # print(left_second_distance)
            # print(c_left)
            # print(leftClosestAngle)
            # print(left_second_angle)
            # print(leftWall * math.sin(abs(leftClosestAngle - left_second_angle)) / c_left)
            # print(c_left_angle)
    
    rightFlip = False
    if rightWall != 0:
        if rightClosestAngle + LIDAR_DELTA_THETA > LIDAR_MAX_ANGLE:
            right_second_angle = math.radians(rightClosestAngle - LIDAR_DELTA_THETA)
            right_second_distance = right_values[max(int(math.degrees(right_second_angle) * N // 360), len(right_values) - 1)]
        else:
            rightFlip = True
            right_second_angle = math.radians(rightClosestAngle - LIDAR_DELTA_THETA)
            right_second_distance = right_values[min(int(math.degrees(right_second_angle) * N // 360), len(right_values) - 1)]

        if right_second_distance == Inf:
            # right_second_distance = next(val for x, val in enumerate(right_values) if val > 0 and val < Inf)
            # right_second_angle = math.radians(next(i for i, x in enumerate(right_values) if x > 0 and x < Inf))
            c_right_angle = 0
        else:
            # print("RIGHT")
            # print(right_second_angle)
            # print(right_second_distance)
            # print(rightWall**2 + right_second_distance**2 - 2 * rightWall * right_second_distance * math.cos(abs(math.radians(rightClosestAngle) - right_second_angle)))
            c_right = math.sqrt(rightWall**2 + right_second_distance**2 - 2 * rightWall * right_second_distance * 
                        math.cos(abs(math.radians(rightClosestAngle) - right_second_angle)))
            c_right_angle = rc_utils.remap_range(c_right_angle, 0, 90, 0, 1)
            
            if rightFlip:
                c_right_angle = np.arcsin(right_second_distance * math.sin(abs(math.radians(rightClosestAngle) - right_second_angle)) / c_right)
            else:
                c_right_angle = np.arcsin(rightWall * math.sin(abs(math.radians(rightClosestAngle) - right_second_angle)) / c_right)

            # c_right_angle = 180 - abs(rightClosestAngle - math.degrees(right_second_angle)) - math.degrees(c_right_angle)

            # print(rightWall)
            # print(right_second_distance)
            # print(c_right)
            # print(rightClosestAngle)
            # print(right_second_angle)
            # print(rightWall * math.sin(abs(math.radians(rightClosestAngle) - right_second_angle)) / c_right)
            # print(c_right_angle)

    total = leftWall + rightWall
    # print(right_second_distance)
    # print(c_right_angle)
    print("LEFT")
    c_left_error = math.degrees(c_left_angle) - 90 if c_left_angle != 0 else 0
    c_right_error = 90 - math.degrees(c_right_angle) if c_right_angle != 0 else 0
    print(c_left_angle)
    print(c_right_angle)
    print(c_left_error)
    print(c_right_error)
    left_scaled = 1/(leftWall / total) * c_left_error if leftWall != 0 else 0
    right_scaled = 1/(rightWall / total) * c_right_error if rightWall != 0 else 0
    print(rc_utils.remap_range(left_scaled + right_scaled, -90, 90, -1, 1))
    return rc_utils.remap_range(left_scaled + right_scaled, -90, 90, -1, 1)
    

# [FUNCTION] After start() is run, this function is run once every frame (ideally at
# 60 frames per second or slower depending on processing speed) until the back button
# is pressed  
def update():
    """
    After start() is run, this function is run every frame until the back button
    is pressed
    """
    global speed, angle
    global kP, kI, kD
    global X_Released, Y_Released
    global integral, times, last_error
    global ilc_data

    update_distance_from_wall()
    update_camera_frames()

    if (rc.controller.is_down(rc.controller.Button.X) and X_Released):
        X_Released = False
        kP += 0.00001
        print(kP)
    elif not rc.controller.is_down(rc.controller.Button.X):
        X_Released = True

    if (rc.controller.is_down(rc.controller.Button.Y) and Y_Released):
        kP -= 0.00001
        print(kP)
        Y_Released = False
    elif not rc.controller.is_down(rc.controller.Button.Y):
        Y_Released = True
        

    if ((leftWall == 0 or rightWall == 0) and not (leftWall == 0 and rightWall == 0)):
        setpoint = DIST_FROM_WALL
        dist_error = leftWall - setpoint if rightWall == 0 else setpoint - rightWall
        kP = kP_ONE_WALL
    elif (leftWall != 0 and rightWall != 0):
        setpoint = (leftWall + rightWall) / 2
        dist_error = leftWall - setpoint
        kP = kP_TWO_WALL
    dist_error = rc_utils.remap_range(dist_error, -100, 100, -1, 1)

    angle_error = compute_angle_error()
    error = k_DISTANCE * dist_error + k_ANGLE * angle_error

    time = rc.get_delta_time()
    integral = integral + error * time if INTEGRAL_WINDOW == 0 else calcIntegral(times, last_error)
    deriv = calcDeriv(error, time)

    angle = kP * error + kI * integral + kD * deriv
    # angle += compute_ilc_compensation(round(leftWall, 0), round(rightWall, 0), angle)
    angle = rc_utils.clamp(angle, MIN_ANGLE, MAX_ANGLE)

    speed = max(MAX_SPEED - 1.25 * abs(error), MIN_SPEED)

    last_error.append(error)
    if (len(last_error) > max(INTEGRAL_WINDOW, 5)):
        last_error.pop(0)
    
    times.append(times[-1] + time if len(times) > 0 else time)
    ilc_data.append((round(leftWall, 0), round(rightWall, 0), angle, error))
    # plt.plot(times, last_readings, label = "Position")
    # plt.plot(times, [setpoint for _ in range(len(times))], label = "Setpoint")
    # plt.draw()
    
    # Set the speed and angle of the RACECAR after calculations have been complete
    rc.drive.set_speed_angle(speed, angle)

    # Print the current speed and angle when the A button is held down
    print(str(leftWall) + "\t" + str(rightWall) + "\t  Speed: " + str(round(speed, 2)) + "\tAngle " + str(round(angle, 2))
           + "\t" + str(compute_ilc_compensation(round(leftWall, 0), round(rightWall, 0), angle)))
    
    if rc.controller.is_down(rc.controller.Button.A):
        print("Speed:", speed, "Angle:", angle)

# [FUNCTION] update_slow() is similar to update() but is called once per second by
# default. It is especially useful for printing debug messages, since printing a 
# message every frame in update is computationally expensive and creates clutter
def update_slow():
    global ctr
    """
    After start() is run, this function is run at a constant rate that is slower
    than update().  By default, update_slow() is run once per second
    """
    # If an image is found but no contour is found, print all dashes
    print(str(leftWall) + "\t" + str(rightWall) + "\t  Speed: " + str(round(speed, 2)) + "\tAngle " + str(round(angle, 2)))
    ctr += 1
    if (ctr % 4 == 0):
        print(ilc_data)
    

########################################################################################
# DO NOT MODIFY: Register start and update and begin execution
########################################################################################

if __name__ == "__main__":
    rc.set_start_update(start, update, update_slow)
    rc.go()